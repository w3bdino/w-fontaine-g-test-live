{"version":3,"sources":["components/footer/footer.js","components/typingtest/typingform.js","components/typingtest/typingform.hook.js","components/spinner/spinner.js","components/ui/button.js","components/results/result.js","components/welcome/welcome.js","components/timer/timer.js","container/typing.racer.game.container/typing.racer.game.container.js","container/typing.racer.game.container/typing.racer.game.hooks.js","pages/typing.racer.page/typing.racer.game.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Container","Date","getFullYear","TypingRacerForm","wordsTyped","incrementWordsTyped","wordsList","processScores","useState","input","setInput","wordToType","setWordToType","wordsBefore","setWordsBefore","wordsAfter","setWordsAfter","useEffect","slice","join","useProcessArticle","data","CharacterToType","reactStringReplace","match","i","key","style","color","Row","Col","md","Card","CardBody","Form","onSubmit","e","preventDefault","Input","type","value","onChange","target","autoFocus","Spinner","StartButton","startTest","btntext","Button","onClick","Results","pctResult","allResults","CardHeader","Table","responsive","reverse","map","val","index","percentage","wpm","datetime","toLocaleString","Welcome","Timer","expiryTimestamp","getTimerStatus","useTimer","onExpire","seconds","minutes","hours","days","TypingRacerGameContainer","timerstatus","setTimerStatus","setCompletionPct","setResults","initialtime","testActive","setTestActive","time","setTime","setWordsList","setWordsTyped","isLoading","setTestLoading","error","setError","a","settime","setSeconds","getSeconds","fetch","res","json","sentence","wordsListToSet","push","split","concat","apply","filter","word","useGenerateArticle","hookData","letpctResult","length","toFixed","prevState","cb","deps","componentJustMounted","useRef","current","useEffectAfterMount","TypingRacerGamePage","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.39d327f6.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport { Container } from \"reactstrap\";\nimport './footer.scss'\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <Container>\n        <div className=\"copyright\">\n          Â© {new Date().getFullYear()} Front End Developer Test {\" \"}\n            <i className=\"tim-icons icon-heart-2\" /> by{\" \"}\n            Dino Robles{\" \"}|{\" \"}webdino.r@gmail.com\n            {\" \"}|{\" \"}\n          Front End Developer.\n        </div>\n      </Container>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport PropTypes, { string } from 'prop-types';\nimport reactStringReplace from 'react-string-replace';\nimport { useProcessArticle } from './typingform.hook';\nimport { Card, CardBody, Form, Input, Row, Col } from \"reactstrap\";\nimport './typingform.scss';\n\nfunction TypingRacerForm({ wordsTyped, incrementWordsTyped, wordsList, processScores }) {\n\n  const [data, setInput] = useProcessArticle({ wordsTyped, incrementWordsTyped, wordsList, processScores }); \n  const { input, wordToType, wordsBefore, wordsAfter } = data;\n\n  const handleChange = (e) => {\n    const { target } = e\n    setInput(target.value);\n  }\n\n  const CharacterToType = reactStringReplace(wordToType, input, (match, i, key) => {\n    return (key === 0) ? <span key={key} style={{ color: 'red' }} className={`currentchar`}>{match}</span> : match\n    }\n  );\n\n  return (\n    <div className=\"typingform\">\n      <Row>\n        <Col md=\"12\">\n          <Card>\n            <CardBody>     \n              <h3 className=\"words-container\">\n                <span className=\"words-before\">{wordsBefore}</span>{\" \"}\n                <span className=\"word-to-type\">{CharacterToType}</span>{\" \"}\n                <span className=\"words-after\">{wordsAfter}</span>\n              </h3>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md=\"12\">\n          <Card>\n            <CardBody>       \n              <Form onSubmit={e => e.preventDefault()}>\n                <Input\n                  type=\"text\"\n                  value={input}\n                  onChange={handleChange}\n                  autoFocus\n                ></Input>\n              </Form>\n              </CardBody>\n          </Card>\n        </Col>\n      </Row>              \n    </div>\n  );\n}\n\nTypingRacerForm.propTypes = {\n  wordsTyped: PropTypes.number,\n  incrementWordsTyped: PropTypes.func,\n  wordsList: PropTypes.arrayOf(string),\n  processScores: PropTypes.func,\n}\n\nexport default TypingRacerForm;\n","import React, { useState, useEffect } from 'react';\n\n// convert Article to array\nexport const useProcessArticle = ({ wordsTyped, incrementWordsTyped, wordsList, processScores }) => {\n  const [input, setInput] = useState(\"\");\n  const [wordToType, setWordToType] = useState(wordsList[wordsTyped]);\n  const [wordsBefore, setWordsBefore] = useState(\"\");\n  const [wordsAfter, setWordsAfter] = useState(\"\");\n\n  useEffect(() => {\n    if(!wordToType){\n      // if the user has typed all words before time expires, process scores\n      processScores();\n    }\n    if (input === wordToType) {\n      // Word typed correctly! move to next word\n      incrementWordsTyped();\n      setInput(\"\");\n    }\n  }, [input, wordToType, incrementWordsTyped, processScores]);\n\n  useEffect(() => {\n    if (wordsTyped === 0) {\n      setInput(\"\");\n    }\n    // Set current word to type based on user's progress\n    setWordToType(wordsList[wordsTyped]);\n    /* Combine list of words before current word to type into one string. */\n    let wordsBefore = wordsList.slice(0, wordsTyped);\n    wordsBefore = wordsBefore.join(\" \");\n\n    let wordsAfter = wordsList.slice(wordsTyped + 1);\n    wordsAfter = wordsAfter.join(\" \");\n\n    setWordsBefore(wordsBefore);\n    setWordsAfter(wordsAfter);\n  }, [wordsTyped, wordsList]);\n     \n  return [{ input, wordToType, wordsBefore, wordsAfter }, setInput];\n};\n\n\n","import React from \"react\";\nimport './spinner.scss';\n\nconst Spinner = () => (\n  <div className=\"Spinner\">\n    <div className=\"loader\"></div>\n  </div>    \n)\n\nexport default Spinner;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Button } from 'reactstrap';\n\nfunction StartButton({ startTest, btntext }) {\n  return (\n    <div className=\"Start-Button\">\n      <Button className=\"w-100\" color=\"primary\" onClick={startTest}>{btntext}</Button>\n    </div>\n  );\n}\n\nStartButton.propTypes = {\n  startTest: PropTypes.func.isRequired,\n  btntext: PropTypes.string.isRequired,\n}\n\nexport default StartButton;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport StartButton from \"../ui/button\";\nimport { Card, CardHeader, CardBody, Table, Row, Col } from \"reactstrap\";\nimport './result.scss';\n\nconst Results = ({ wordsTyped, pctResult, startTest, allResults }) => {\n\n  const renderResultsData = () => {\n    return allResults.reverse().map((val, index) => {\n       const { percentage, wpm, datetime } = val //destructuring\n       return (\n          <tr key={index}>\n             <td>{wpm}</td>\n             <td>{percentage}%</td>\n             <td>{datetime.toLocaleString()}</td>\n          </tr>\n       )\n    })\n  }  \n\n  return (\n    <div className=\"resultwrap\">\n    <Row>\n      <Col md=\"6\">\n        <Card>\n          <CardBody>       \n            <h2>Your test result</h2>\n            <hr></hr>\n            <div className=\"resulttext\">Your current typing speed is {wordsTyped} WPM</div>\n            <div className=\"resulttext\">Completion percentage is {pctResult} %</div>\n            <StartButton startTest={startTest} btntext=\"Try Again !\" />   \n          </CardBody>\n        </Card>\n      </Col>\n      <Col md=\"6\">\n        <Card>\n          <CardHeader>\n            <h2>Previous results</h2>\n            <hr></hr>\n          </CardHeader>\n          <CardBody>\n            <Table className=\"tablesorter\" responsive>\n              <thead className=\"text-primary\">\n                <tr>\n                  <th>WPM</th>\n                  <th>Percentage</th>\n                  <th>Date Time</th>\n                </tr>\n              </thead>\n                <tbody>\n                {renderResultsData()}\n              </tbody>\n            </Table>\n          </CardBody>\n          </Card>\n        </Col>      \n    </Row>  \n    </div>      \n  )\n}\n\nResults.propTypes = {\n  wordsTyped: PropTypes.number,\n  pctResult:  PropTypes.string,\n  startTest: PropTypes.func,\n  allResults: PropTypes.arrayOf(Object)\n}\n\nexport default Results;\n","import React from \"react\";\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\nimport StartButton from \"../ui/button\";\nimport \"./welcome.scss\";\n\nfunction Welcome({ startTest }) {\n  return (\n    <div className=\"welcome\">\n      <Row>\n        <Col md=\"12\">\n          <Card>\n            <CardBody>       \n            <div className=\"welcomewrap\">\n              <h1 className=\"header\">Welcome to Typing Racer Game !</h1>\n              <hr></hr>\n              <h3>Rules:</h3>\n              <ul className=\"list\">\n                <li>Type as many words as you can for 60 seconds</li>\n                <li>No need to enter spaces between each word</li>\n                <li>Punctuation and letter casing must match</li>\n              </ul>\n              <StartButton startTest={startTest} btntext=\"Start Game !\" />   \n            </div> \n              </CardBody>\n          </Card>\n        </Col>\n      </Row>              \n    </div>\n  );\n}\n\nexport default Welcome;\n","import React from 'react';\nimport { useTimer } from 'react-timer-hook';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Row, Col } from \"reactstrap\";\nimport './timer.scss';\n\nconst Timer = ({ expiryTimestamp, getTimerStatus }) => {    \n  const { seconds, minutes, hours, days } = useTimer({ expiryTimestamp, onExpire: () => getTimerStatus(false) });\n\n  return (\n    <Row>\n      <Col md=\"12\">\n        <Card>\n          <CardBody>     \n            <div className=\"timerwrap\">\n            <span className=\"timertext\">You have </span><span className=\"timer\">{hours}:{minutes}:{seconds} </span><span className=\"timertext\">to go !</span>\n            </div>\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  );\n}\n\nTimer.propTypes = {\n  expiryTimestamp: PropTypes.instanceOf(Date).isRequired,\n  getTimerStatus: PropTypes.func,\n}\n\nexport default Timer;","import React, { useState } from \"react\";\nimport \"./typing.racer.game.scss\";\nimport TypingRacerForm from \"../../components/typingtest/typingform\";\nimport Spinner from \"../../components/spinner/spinner\";\nimport Results from \"../../components/results/result\";\nimport Welcome from \"../../components/welcome/welcome\";\nimport { useGenerateArticle, useEffectAfterMount } from \"./typing.racer.game.hooks\";\nimport  Timer from '../../components/timer/timer';\n\nfunction TypingRacerGameContainer() {\n  const INITIALTIME = 20; // set time in SECONDS\n  const [timerstatus, setTimerStatus] = useState(true);\n  const [pctResult, setCompletionPct] = useState();\n  const [allResults, setResults] = useState([]);\n  const [hookData, setTestActive, setWordsTyped, startTest] = useGenerateArticle(INITIALTIME, \"Meat\"); // time , type\n  const {testActive, wordsList, wordsTyped, isLoading, time, error} = hookData;\n\n  const incrementWordsTyped = () => {\n    setWordsTyped(wordsTyped + 1);\n  }\n\n  const processScores = () => {\n    // Time has expired ... process results\n    setTestActive(false);\n    let letpctResult = ((wordsTyped / wordsList.length) * 100).toFixed(2);\n    setCompletionPct(letpctResult);\n    setResults(prevState => [...prevState, { percentage: letpctResult, wpm: wordsTyped, datetime: new Date() }]);\n  }\n\n  useEffectAfterMount(() => {\n    if(!timerstatus){\n      processScores();\n    }\n    setTimerStatus(true)\n  }, [timerstatus]);  \n\n  if(isLoading) { return <Spinner /> }\n\n  if (testActive) {\n    return (\n      <div className=\"wpmgame\">\n        <Timer expiryTimestamp={time} getTimerStatus={setTimerStatus} />\n        <TypingRacerForm\n          wordsList={wordsList}\n          wordsTyped={wordsTyped}\n          incrementWordsTyped={incrementWordsTyped}\n          processScores={processScores}\n        />\n      </div>\n    );\n  }\n\n  if(allResults.length > 0){ \n      return <Results \n      wordsTyped={wordsTyped} \n      pctResult={pctResult} \n      startTest={startTest} \n      allResults={allResults}\n    />\n  }\n\n  if(allResults.length === 0){ \n    return <Welcome startTest={startTest} />\n  }  \n\n}\n\nexport default TypingRacerGameContainer;\n","import React, { useState, useEffect, useRef } from 'react';\n\n\nexport const useGenerateArticle = (initialtime, type) => {\n  const [testActive, setTestActive] = useState(false);    \n  const [time, setTime] = useState(0);\n  const [wordsList, setWordsList] = useState([]);\n  const [wordsTyped, setWordsTyped] = useState(0);\n  const [isLoading, setTestLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n\n  const startTest = async () => {\n    const settime = new Date();\n    settime.setSeconds(settime.getSeconds() + initialtime); \n    setTestLoading(true);\n    try {\n      const res = await fetch(`https://baconipsum.com/api/?type=${type}&paras=1`);\n      const json = await res.json();\n\n      let wordsListToSet = [];\n      // Split string into list of words\n      for (let sentence in json) {\n        wordsListToSet.push(json[sentence].split(\" \"));\n      }\n      wordsListToSet = [].concat.apply([], wordsListToSet);\n      wordsListToSet = wordsListToSet.filter(word => {\n        return word !== \"\";\n      });\n      \n      setTestActive(true);\n      setWordsList(wordsListToSet);\n      setTime(settime);\n      setWordsTyped(0);\n      setTestLoading(false);\n\n    } catch (error) {\n      setError(error);\n      setTestLoading(false)\n    }\n  };\n     \n  return [\n    { testActive, wordsList, wordsTyped, isLoading, time, error }, \n    setTestActive, \n    setWordsTyped, \n    startTest,\n  ];\n};\n\n\nexport const useEffectAfterMount = (cb, deps) => {\n  const componentJustMounted = useRef(true)\n    useEffect(() => {\n      if (!componentJustMounted.current) {\n        return cb()\n      }\n      componentJustMounted.current = false\n  }, deps)\n}\n","import React from \"react\";\nimport \"./typing.racer.game.scss\";\nimport Footer from \"../../components/footer/footer\";\nimport TypingRacerGameContainer from '../../container/typing.racer.game.container/typing.racer.game.container'\nimport { Container, Card, CardBody, CardText, Row, Col } from \"reactstrap\";\n\nconst TypingRacerGamePage = () => {\n  return (\n    <Container className=\"TypingRacerGamePage\">\n        <div className=\"content\">\n          <Row>\n            <Col md=\"12\">\n              <TypingRacerGameContainer />\n            </Col>\n          </Row>\n        </div>      \n        <Footer />\n    </Container>\n  )\n}\n\nexport default TypingRacerGamePage;\n","import React, { useState, useEffect } from \"react\";\nimport TypingRacerGamePage from './pages/typing.racer.page/typing.racer.game'\nimport \"./App.scss\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <TypingRacerGamePage />\n    </div>\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/black-dashboard-react.scss';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}